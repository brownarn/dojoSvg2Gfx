Index: _base.js
===================================================================
--- _base.js	(.../Vendor/dojo/1.9.1/dojox/gfx/_base.js)	(revision 2965)
+++ _base.js	(.../Karma/trunk/karma191/dojox/gfx/_base.js)	(revision 2965)
@@ -402,12 +402,30 @@
 			// type: String
 			//		Specifies this object is a Path, default value 'path'.
 			type: "path", 
-
-			// path: String
-			//		The path commands. See W32C SVG 1.0 specification.
+			
+			//	id: String
+			//		Unique id.
+			id : "", 
+			
+			//color: "#000000",
+			
+			// transform: String
+			//		Defined list of transform definitions that are applied in the order provided
+			transform: "",
+			
+			// // pathLength: String
+			// //		Defaults to empty string value.
+			// pathLength: "",
+			
+			// pathLength: String
 			//		Defaults to empty string value.
-			path: ""
+			path: "",
+			
+			// d: String
+			//		Path data
+			d : ""
 		},
+		
 		defaultPolyline: {
 			// summary:
 			//		Defines the default PolyLine prototype.
@@ -415,11 +433,20 @@
 			// type: String
 			//		Specifies this object is a PolyLine, default value 'polyline'.
 			type: "polyline",
-
+			
+			//	id: String
+			//		Unique id.
+			id : "", 
+			
+			// transform: String
+			//		Defined list of transform definitions that are applied in the order provided
+			transform: "",
+			
 			// points: Array
 			//		An array of point objects [{x:0,y:0},...] defining the default polyline's line segments. Value is an empty array [].
 			points: []
 		},
+		
 		defaultRect: {
 			// summary:
 			//		Defines the default Rect prototype.
@@ -427,6 +454,10 @@
 			// type: String
 			//		Specifies this default object is a type of Rect. Value is 'rect'
 			type: "rect",
+			
+			//	id: String
+			//		Unique id.
+			id : "", 
 
 			// x: Number
 			//		The X coordinate of the default rectangles position, value 0.
@@ -446,8 +477,17 @@
 
 			// r: Number
 			//		The corner radius for the default rectangle, value 0.
-			r: 0
+			r: 0,
+			
+			// rx: Number
+			//		x-axis radius of the ellipse used to round off the corners of the rectangle
+			rx: 0,
+			
+			// ry: Number
+			//		y-axis radius of the ellipse used to round off the corners of the rectangle
+			ry: 0
 		},
+		
 		defaultEllipse: {
 			// summary:
 			//		Defines the default Ellipse prototype.
@@ -455,6 +495,10 @@
 			// type: String
 			//		Specifies that this object is a type of Ellipse, value is 'ellipse'
 			type: "ellipse",
+			
+			//	id: String
+			//		Unique id.
+			id : "", 
 
 			// cx: Number
 			//		The X coordinate of the center of the ellipse, default value 0.
@@ -465,13 +509,14 @@
 			cy: 0,
 
 			// rx: Number
-			//		The radius of the ellipse in the X direction, default value 200.
+			//		x-axis radius of the ellipse in the X direction, default value 200.
 			rx: 200,
 
 			// ry: Number
-			//		The radius of the ellipse in the Y direction, default value 200.
+			//		y-axis radius of the ellipse in the Y direction, default value 200.
 			ry: 100
 		},
+		
 		defaultCircle: {
 			// summary:
 			//		An object defining the default Circle prototype.
@@ -479,6 +524,10 @@
 			// type: String
 			//		Specifies this object is a circle, value 'circle'
 			type: "circle",
+			
+			//	id: String
+			//		Unique id.
+			id : "", 
 
 			// cx: Number
 			//		The X coordinate of the center of the circle, default value 0.
@@ -491,6 +540,7 @@
 			//		The radius, default value 100.
 			r: 100
 		},
+		
 		defaultLine: {
 			// summary:
 			//		An object defining the default Line prototype.
@@ -498,6 +548,10 @@
 			// type: String
 			//		Specifies this is a Line, value 'line'
 			type: "line",
+			
+			//	id: String
+			//		Unique id.
+			id : "", 
 
 			// x1: Number
 			//		The X coordinate of the start of the line, default value 0.
@@ -515,6 +569,7 @@
 			//		The Y coordinate of the end of the line, default value 100.
 			y2: 100
 		},
+		
 		defaultImage: {
 			// summary:
 			//		Defines the default Image prototype.
@@ -522,6 +577,10 @@
 			// type: String
 			//		Specifies this object is an image, value 'image'.
 			type: "image",
+			
+			//	id: String
+			//		Unique id.
+			id : "", 
 
 			// x: Number
 			//		The X coordinate of the image's position, default value 0.
@@ -543,6 +602,7 @@
 			//		The src url of the image, defaults to empty string.
 			src: ""
 		},
+		
 		defaultText: {
 			// summary:
 			//		Defines the default Text prototype.
@@ -550,6 +610,10 @@
 			// type: String
 			//		Specifies this is a Text shape, value 'text'.
 			type: "text",
+			
+			//	id: String
+			//		Unique id.
+			id : "", 
 
 			// x: Number
 			//		The X coordinate of the text position, default value 0.
@@ -578,7 +642,13 @@
 			// kerning: Boolean
 			//		Whether kerning is used on the text, boolean default value true.
 			kerning: true
+		
+			// Spacing properties
+			// letterspacing : "0.3px", 
+			// lineheight : "100%", // equivalent to fontsize
+			// wordspacing : "0px" 
 		},
+		
 		defaultTextPath: {
 			// summary:
 			//		Defines the default TextPath prototype.
@@ -586,6 +656,10 @@
 			// type: String
 			//		Specifies this is a TextPath, value 'textpath'.
 			type: "textpath",
+			
+			//	id: String
+			//		Unique id.
+			id : "", 
 
 			// text: String
 			//		The text to be displayed, default value empty string.
@@ -615,7 +689,12 @@
 			//		This object defines the default Stroke prototype.
 			// type: String
 			//		Specifies this object is a type of Stroke, value 'stroke'.
+			// key = value in attrLookup in SvgToGfx.js
 			type: "stroke",
+			
+			//	id: String
+			//		Unique id.
+			id : "", 
 
 			// color: String
 			//		The color of the stroke, default value 'black'.
@@ -635,8 +714,124 @@
 
 			// join: Number
 			//		The join style to use when combining path segments. Default value 4.
-			join: 4
+			join: 4,
+			
+			// miterlimit: Number
+			// 		Imposes a limit on the ratio of the miter length to the stroke-width
+			miterlimit: 4,
+			
+			// dasharray: array
+			// 		Controls the pattern of dashes and gaps used to stroke paths
+			dasharray: "none",
+			
+			// dashoffset: Number
+			// 		Specifies the distance into the dash pattern to start the dash
+			dashoffset: 0,
+			
+			// opacity: Number
+			//		Specifies the opacity of the painting operation used to stroke the current object
+			opacity: 1
+		},
+		
+		defaultFill : {
+			//  summary: taken from the svg spec http://www.w3.org/TR/SVG/painting.html#FillProperties
+			//			default values are according to the svg spec;
+			//			see also: http://www.w3.org/TR/SVG/painting.html#SpecifyingPaint
+			
+			// type: String
+			//		Specifies this object is Fill
+			type : "fill", 
+			
+			//	id: String
+			//		Unique id.
+			id : "", 
+			
+			filter: "",
+
+			// paint: String
+			//		 Paints the interior of the given graphical element
+			paint : "black", // SVG spec uses fill   //FIXME fill or paint?
+			
+			// rule: String
+			//		 Indicates the algorithm used to determine what parts of the canvas are included inside the shape
+			fillrule : "nonzero", 
+			
+			// opacity: Number
+			//		 Specificies the opacity of the painting operation used to paint the interior of the object
+			fillopacity : 1 
 		},
+		
+		defaultFilter : {
+			//  summary: taken from the svg spec http://www.w3.org/TR/SVG/filters.html#FilterElement
+			
+			// type: String
+			//		Specifies this object is a Linear Gradient, value 'linear'
+			type: "filter",
+			
+			//	id: String
+			//		Unique id.
+			id : "", 
+			
+			//	x: String
+			//		Coordinate.
+			x: "",
+			
+			//	y: String
+			//		Coordinate
+			y: "",
+						
+			// width: Number
+			//		The width of the image, default value 0.
+			width: "",
+					
+			// height: Number
+			//		The height of the image, default value 0.
+			height: "",
+			
+			// filterRes: Number
+			//		Indicates the width and height of the intermediate images in pixels
+			filterRes: "",
+			
+			// filterUnits: Number
+			//		Defines the coordinate system for attributes x, y, width, and height
+			filterUnits: "",
+			
+			// primitiveUnits: Number
+			//		Specificies the coordinate system for the various length values within the filter primitives
+			primitiveUnits: "userSpaceOnUse",
+			
+			colorInterpolationFilters: "",
+			
+			// xlinkhref: String
+			//		A URI reference to a different filter within the current SVG doc fragment
+			xlinkhref: ""
+			
+		},
+		
+		defaultGaussianBlur : {
+			//  summary: taken from the svg spec http://www.w3.org
+			
+			// type: String
+			//		Specifies this object is feGaussianBlur'
+			type: "feGaussianBlur",
+			
+			//	id: String
+			//		Unique id.
+			id: "",
+			
+			//	in: String
+			//		Identifies input for the given filter primitive
+			"in": "",
+			
+			//	stdDeviation: Number
+			//		Standard deviation for the blur operation
+			stdDeviation: 0,
+			
+			// xlinkhref: String
+			//		An IRI reference to a different linearGradient or radialGradient within the current SVG doc fragment
+			xlinkhref : null
+		},
+		
 		defaultLinearGradient: {
 			// summary:
 			//		An object defining the default stylistic properties used for Linear Gradient fills.
@@ -645,6 +840,10 @@
 			// type: String
 			//		Specifies this object is a Linear Gradient, value 'linear'
 			type: "linear",
+			
+			//	id: String
+			//		Unique id.
+			id : "", 
 
 			// x1: Number
 			//		The X coordinate of the start of the virtual line along which the gradient is drawn, default value 0.
@@ -661,6 +860,22 @@
 			// y2: Number
 			//		The Y coordinate of the end of the virtual line along which the gradient is drawn, default value 100.
 			y2: 100,
+			
+			// gradientUnits: String
+			// 		Defines the coordinate system for attributes x1, y1, x2, y2
+			gradientUnits: "objectBoundingBox", // other option is "userSpaceOnUse"
+			
+			// gradientTransform: String
+			// 		Contains the definition of an optional additional transformation from gradient coordinate system
+			gradientTransform: "", // Effect of not specifying is application of identity transform
+			
+			// spreadMethod: String
+			//		Indicates what happens if the gradient starts or ends inside the bounds of the target rectangle
+			spreadMethod: "", // Effect of not specifying is to use "pad", options pad, reflect, repeat
+			
+			// xlinkhref: String
+			//		An IRI reference to a different linearGradient or radialGradient within the current SVG doc fragment
+			xlinkhref: "",
 
 			// colors: Array
 			//		An array of colors at given offsets (from the start of the line).  The start of the line is
@@ -670,6 +885,7 @@
 				{ offset: 0, color: "black" }, { offset: 1, color: "white" }
 			]
 		},
+		
 		defaultRadialGradient: {
 			// summary:
 			//		An object specifying the default properties for RadialGradients using in fills patterns.
@@ -677,6 +893,10 @@
 			// type: String
 			//		Specifies this is a RadialGradient, value 'radial'
 			type: "radial",
+			
+			//	id: String
+			//		Unique id.
+			id : "", 
 
 			// cx: Number
 			//		The X coordinate of the center of the radial gradient, default value 0.
@@ -689,6 +909,30 @@
 			// r: Number
 			//		The radius to the end of the radial gradient, default value 100.
 			r: 100,
+			
+			// fx: String
+			//		Defines the x-focal point for the radial gradient
+			fx: "",  // Effect of not specifying is to use the value of cx
+			
+			// fy: String
+			//		Defines the y-focal point for the radial gradient
+			fy: "",  // Effect of not specifying is to use the value of cx
+			
+			// gradientUnits: String
+			// 		Defines the coordinate system for attributes x1, y1, x2, y2
+			gradientUnits: "objectBoundingBox", // other option is "userSpaceOnUse"
+			
+			// gradientTransform: String
+			// 		Contains the definition of an optional additional transformation from gradient coordinate system
+			gradientTransform: "", // Effect of not specifying is application of identity transform
+			
+			// spreadMethod: String
+			//		Indicates what happens if the gradient starts or ends inside the bounds of the target rectangle
+			spreadMethod: "", // Effect of not specifying is to use "pad", options pad, reflect, repeat
+			
+			// xlinkhref: String
+			//		An IRI reference to a different linearGradient or radialGradient within the current SVG doc fragment
+			xlinkhref: "",
 
 			// colors: Array
 			//		An array of colors at given offsets (from the center of the radial gradient).
@@ -698,6 +942,21 @@
 				{ offset: 0, color: "black" }, { offset: 1, color: "white" }
 			]
 		},
+		
+		defaultClipPath : {
+			//	id: String
+			//		Unique id.
+			id : "", 
+			
+			// transform: String
+			//		Defined list of transform definitions that are applied in the order provided
+			transform: "",
+			
+			// clipPathUnits: String
+			// 		Defines the coordinate system for attributes x1, y1, x2, y2
+			clipPathUnits: "userSpaceOnUse", // other option is "userSpaceOnUse"
+		},
+		
 		defaultPattern: {
 			// summary:
 			//		An object specifying the default properties for a Pattern using in fill operations.
@@ -705,6 +964,10 @@
 			// type: String
 			//		Specifies this object is a Pattern, value 'pattern'.
 			type: "pattern",
+			
+			//	id: String
+			//		Unique id.
+			id : "", 
 
 			// x: Number
 			//		The X coordinate of the position of the pattern, default value is 0.
@@ -724,15 +987,40 @@
 
 			// src: String
 			//		A url specifying the image to use for the pattern.
-			src: ""
+			src: "",
+			
+			// patternUnits: String
+			// 		Defines the coordinate system for attributes x, y, width, and height
+			patternUnits: "objectBoundingBox", // other option is "userSpaceOnUse"
+			
+			// patternContentUnits: String
+			// 		Defines the coordinate system for the contents of the pattern
+			patternContentUnits: "objectBoundingBox", // other option is "userSpaceOnUse"
+			
+			// patternTransform: String
+			// 		Contains the definition of an optional additional transformation from the pattern coordinate system into the target coordinate system
+			patternTransform: "", // Effect of not specifying is application of identity transform
+			
+			// xlinkhref: String
+			//		An IRI reference to a different linearGradient or radialGradient within the current SVG doc fragment
+			xlinkhref: ""
 		},
-		defaultFont: {
+		
+		defaultFont: {  // Includes attributes of SVG 'font-face' element
 			// summary:
 			//		An object specifying the default properties for a Font used in text operations.
 
 			// type: String
 			//		Specifies this object is a Font, value 'font'.
 			type: "font",
+			
+			//	id: String
+			//		Unique id.
+			id : "", 
+			
+			// family: String
+			//		The font family, one of 'serif', 'sanserif', ..., default value 'serif'.
+			family: "serif", // calibre
 
 			// style: String
 			//		The font style, one of 'normal', 'bold', default value 'normal'.
@@ -745,14 +1033,14 @@
 			// weight: String
 			//		The font weight, one of 'normal', ..., default value 'normal'.
 			weight: "normal",
+			
+			// stretch: String
+			//		Indication of the condensed or expanded nature of the face relative to others in the same font family	
+			stretch : "normal", 
 
 			// size: String
 			//		The font size (including units), default value '10pt'.
-			size: "10pt",
-
-			// family: String
-			//		The font family, one of 'serif', 'sanserif', ..., default value 'serif'.
-			family: "serif"
+			size: "10pt", // 12px
 		},
 
 		getDefault: (function(){
@@ -779,6 +1067,7 @@
 			//		A color representation.
 			return (color instanceof Color) ? color : new Color(color); // dojo/Color
 		},
+		
 		normalizeParameters: function(existed, update){
 			// summary:
 			//		updates an existing object with properties from an 'update'
@@ -799,6 +1088,7 @@
 			}
 			return existed;	// Object
 		},
+		
 		makeParameters: function(defaults, update){
 			// summary:
 			//		copies the original object, and all copied properties from the
@@ -822,6 +1112,7 @@
 			}
 			return result; // Object
 		},
+		
 		formatNumber: function(x, addSpace){
 			// summary:
 			//		converts a number to a string using a fixed notation
@@ -845,6 +1136,7 @@
 			}
 			return addSpace ? " " + val : val; // String
 		},
+		
 		// font operations
 		makeFontString: function(font){
 			// summary:
@@ -853,6 +1145,7 @@
 			//		font object (see dojox/gfx.defaultFont)
 			return font.style + " " + font.variant + " " + font.weight + " " + font.size + " " + font.family; // Object
 		},
+		
 		splitFontString: function(str){
 			// summary:
 			//		converts a CSS font string to a font object
